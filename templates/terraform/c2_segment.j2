{## ==================== Azure ==================== ##}
{% macro azure_instance_module(suffix, data, inbound, current_index=None) %}
module "{{ suffix }}" {
  source              = "{{ TERRAFORM_PATH }}/modules/azure"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
  instance_name       = "{{ suffix }}"
  computer_name       = "{{ data.vm_hostname }}{% if data.count > 1 and current_index is not none %}{{ current_index }}{% endif %}"
  username_vm         = "{{ data.vm_username }}"
  vm_size             = "Standard_B1s"
  tags_segment        = "{{ suffix }}"
  local_user          = "${var.local_user}"
  inbound_rules       = {{ inbound | tojson }}
}
{% endmacro -%}
{## ==================== AWS ==================== ##}
{% macro aws_instance_module(suffix, data, ingress_rules, current_index=None) %}
module "{{ suffix }}" {
  source              = "{{ TERRAFORM_PATH }}/modules/aws"
  instance_name       = "{{ suffix }}"
  tag_name            = "{{ suffix }}"
  computer_name       = "{{ data.vm_hostname }}{% if data.count > 1 and current_index is not none %}{{ current_index }}{% endif %}"
  username_vm         = "{{ data.vm_username }}"
  local_user          = "${var.local_user}"
  
  ingress_rules       = {{ ingress_rules | tojson }}

  egress_rules = {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
{% endmacro -%}
{%- set https_data = c2_data.redir_https %}

{## ==================== Azure ==================== ##}
{% if c2_data.provider == "azure" -%}
resource "azurerm_resource_group" "rg" {
  name     = "segment_c2_resources"
  location = "{{ c2_data.region }}"
}

variable "local_user" {}

{% set https_inbound = [{ "port": "22", "protocol": "Tcp" }, { "port": "443", "protocol": "Tcp" }, { "port": "80", "protocol": "Tcp" }] %}
  {% for _ in range(https_data.count) %}
{{ azure_instance_module(https_data.instance_name + ('_' + loop.index|string if https_data.count > 1 else ''), https_data, https_inbound, loop.index if https_data.count > 1 else None) }}
  {% endfor %}

{% if c2_data.get('redir_dns') %}
{% set dns_inbound = [{ "port": "22", "protocol": "Tcp" }, { "port": "53", "protocol": "Udp" }] %}
{{ azure_instance_module(c2_data.redir_dns.instance_name, c2_data.redir_dns, dns_inbound) }}
{%- endif %}

{% set srv_inbound = [{ "port": "22", "protocol": "Tcp" }] %}
{{ azure_instance_module(c2_framework.instance_name, c2_framework, srv_inbound) }}

{## ==================== AWS ==================== ##}
{%- elif c2_data.provider == "aws" -%}
{% set https_inbound = [
    { "from_port": 22, "to_port": 22, "protocol": "tcp", "cidr_blocks": ["0.0.0.0/0"] },
    { "from_port": 443, "to_port": 443, "protocol": "tcp", "cidr_blocks": ["0.0.0.0/0"] }
  ]
%}
  {% for _ in range(https_data.count) %}
{{ aws_instance_module(https_data.instance_name + ('_' + loop.index|string if https_data.count > 1 else ''), https_data, https_inbound, loop.index if https_data.count > 1 else None) }}
  {% endfor %}

{%- if c2_data.get('redir_dns') %}
{% set dns_inbound = [
    { "from_port": 22, "to_port": 22, "protocol": "tcp", "cidr_blocks": ["0.0.0.0/0"] },
    { "from_port": 53, "to_port": 53, "protocol": "udp", "cidr_blocks": ["0.0.0.0/0"] }  
  ] 
%}
{{ aws_instance_module(c2_data.redir_dns.instance_name, c2_data.redir_dns, dns_inbound) }}
{%- endif %}

{% set c2_inbound = [
    { "from_port": 22, "to_port": 22, "protocol": "tcp", "cidr_blocks": ["0.0.0.0/0"] }  
  ] 
%}
{{ aws_instance_module(c2_framework.instance_name, c2_framework, c2_inbound) }}
{% endif -%}

locals {
  c2_instances = [
{% for _ in range(https_data.count) %}
    module.{{ https_data.instance_name }}{{ ('_' + loop.index|string if https_data.count > 1 else '') }}.instance_details,
{% endfor %}
{%- if c2_data.get('redir_dns') %}
    module.{{ c2_data.redir_dns.instance_name }}.instance_details,
{% endif %}
    module.{{ c2_framework.instance_name }}.instance_details
  ]

  inventory_content = templatefile("{{ TEMPLATE_PATH }}", {
    c2_instances = local.c2_instances
    headscale_instances = [],
    phish_instances = [],
    siem_instances = []
  })
}

resource "local_file" "ansible_inventory" {
  content  = local.inventory_content
  filename = "${path.root}/inventory.ini"
}

output "c2_instance_passwords" {
  value = [for instance in local.c2_instances : instance.pass if lookup(instance, "pass", null) != null]
  sensitive = true
}

output "c2_instance_ssh_details" {
  value = [for instance in local.c2_instances : "${instance.hostname} = ssh ${instance.user}@${instance.ip}"]
}

{% if c2_data.provider == "azure" -%}
provider "azurerm" {
  skip_provider_registration = "true"
  features {}
}
{% endif %}
